version: '3.8'

services:
  # API Gateway - 모든 서비스의 단일 진입점
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api_gateway
    ports:
      - "48000:8000"
    volumes:
      - ./services/api_gateway:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Registry - 서비스 디스커버리를 위한 레지스트리
  service-registry:
    build:
      context: .
      dockerfile: Dockerfile.service_registry
    ports:
      - "48007:8007"
    volumes:
      - ./services/service_registry:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SERVICE_TTL=60
    networks:
      - a2a_mcp_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - 서비스 레지스트리 및 캐싱용
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - a2a_mcp_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Postgres - 에이전트 카드 레지스트리용
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=agent_registry
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - a2a_mcp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Broker - 비동기 메시지 처리를 위한 브로커
  message-broker:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - a2a_mcp_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Card Registry - 에이전트 능력 관리
  agent-card-registry:
    build:
      context: .
      dockerfile: Dockerfile.agent_card_registry
    ports:
      - "48006:8006"
    volumes:
      - ./services/agent_card_registry:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
      - MESSAGE_BROKER_URL=amqp://message-broker:5672
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agent_registry
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
      - message-broker
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 경계(Gateway) 계층
  event-gateway:
    build:
      context: .
      dockerfile: Dockerfile.event_gateway
    ports:
      - "48001:8001"
    volumes:
      - ./services/event_gateway:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
      - MESSAGE_BROKER_URL=amqp://message-broker:5672
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
      - message-broker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  chat-gateway:
    build:
      context: .
      dockerfile: Dockerfile.chat_gateway
    ports:
      - "48002:8002"
    volumes:
      - ./services/chat_gateway:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
      - MESSAGE_BROKER_URL=amqp://message-broker:5672
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
      - message-broker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 애플리케이션 계층
  sub-agent:
    build:
      context: .
      dockerfile: Dockerfile.sub_agent
    ports:
      - "48010:8000"
    volumes:
      - ./services/sub_agent:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
      - MESSAGE_BROKER_URL=amqp://message-broker:5672
      - AGENT_CARD_REGISTRY_URL=http://agent-card-registry:8006
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
      - message-broker
      - agent-card-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  supervisor:
    build:
      context: .
      dockerfile: Dockerfile.supervisor
    ports:
      - "48003:8003"
    volumes:
      - ./services/supervisor:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
      - MESSAGE_BROKER_URL=amqp://message-broker:5672
      - AGENT_CARD_REGISTRY_URL=http://agent-card-registry:8006/agents
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
      - message-broker
      - agent-card-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 플랫폼 계층
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp_server
    ports:
      - "48004:8004"
    volumes:
      - ./services/mcp_server:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
      - MESSAGE_BROKER_URL=amqp://message-broker:5672
      - TOOL_REGISTRY_URL=http://tool-registry:8005/tools
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
      - message-broker
      - tool-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  tool-registry:
    build:
      context: .
      dockerfile: Dockerfile.tool_registry
    ports:
      - "48005:8005"
    volumes:
      - ./services/tool_registry:/app
    environment:
      - SERVICE_REGISTRY_URL=http://service-registry:8007/services
      - MESSAGE_BROKER_URL=amqp://message-broker:5672
    networks:
      - a2a_mcp_network
    depends_on:
      - service-registry
      - message-broker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./services/frontend
    ports:
      - "48080:8000"
    environment:
      - CHAINLIT_SERVER_PORT=8000
      - CHAINLIT_SERVER_HOST=0.0.0.0
      - CHAINLIT_MAX_TOKENS=2000
      - CHAINLIT_HIDE_COT=true
      - API_GATEWAY_URL=http://api-gateway:8000
    volumes:
      - ./services/frontend:/app
      - frontend-chainlit:/app/.chainlit
    depends_on:
      - api-gateway
    networks:
      - a2a_mcp_network

  # 모니터링 및 로깅
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - a2a_mcp_network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - a2a_mcp_network

networks:
  a2a_mcp_network:
    driver: bridge
  a2a-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  prometheus-data:
  grafana-data:
  frontend-chainlit:
  rabbitmq-data: 